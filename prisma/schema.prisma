// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  teams         TeamMember[]
  reviews       CodeReview[]
  subscription  Subscription?
  apiKeys       ApiKey[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Team {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  slug        String      @unique
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  members     TeamMember[]
  reviews     CodeReview[]
  subscription Subscription?
}

model TeamMember {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  role      String   @default("member") // "owner", "admin", "member"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  userId    String   @db.ObjectId
  teamId    String   @db.ObjectId
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  
  @@unique([userId, teamId])
}

model CodeReview {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  code        String
  language    String
  score       Int
  summary     String
  feedback    Json
  metrics     Json
  createdAt   DateTime @default(now())
  
  userId      String?  @db.ObjectId
  teamId      String?  @db.ObjectId
  
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  team        Team?    @relation(fields: [teamId], references: [id], onDelete: SetNull)
}

model Subscription {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  stripeCustomerId   String    @unique
  stripeSubscriptionId String?
  stripePriceId      String?
  stripeCurrentPeriodEnd DateTime?
  plan               String    @default("free") // "free", "pro", "team"
  status             String    @default("active") // "active", "canceled", "past_due"
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  
  userId             String?   @unique @db.ObjectId
  teamId             String?   @unique @db.ObjectId
  
  user               User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  team               Team?     @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

model ApiKey {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  key         String   @unique
  name        String
  createdAt   DateTime @default(now())
  lastUsed    DateTime?
  
  userId      String   @db.ObjectId
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

